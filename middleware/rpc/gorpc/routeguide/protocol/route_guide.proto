// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//    在 Protocol Buffers (protobuf) 中，edition = "2023"; 表示使用的是 Protocol Buffers 的 2023 版（或称“2023 版规范”）。
//    这个设置指定了 .proto 文件的编译和解析规则应遵循的特定版本。
//
//    作用和意义
//
//    Protocol Buffers 的 edition 指令类似于版本控制，可以帮助开发者选择使用不同的 .proto 文件规范或特性。具体作用包括：
//
//    1.	定义特性集：edition 会影响编译器对 .proto 文件的解析规则。例如，在未来，2023 版可能支持某些新的字段类型、关键字或语法规则。
//    2.	向后兼容性：使用 edition 指令，可以确保文件使用特定规则生成代码，避免不兼容的代码被引入。
//    3.	编译器行为：设置 edition = "2023"; 告诉 protoc 编译器使用 2023 版的规范来编译该 .proto 文件。随着 protobuf 的更新，
//    不同 edition 会支持不同的语法特性，这样可以帮助在升级到新版本时保持向后兼容。
//    要启用 editions 支持，请在 protoc 命令中加上 --experimental_editions 标志，以便编译器接受带有 edition 的 .proto 文件
//edition = "2023";
//    在 Protocol Buffers 中，“字段存在性”（Field Presence）指的是在序列化的数据中，字段是否明确表示“存在”或“缺失”。该选项可以指定字段存在性的行为：
//
//    •	IMPLICIT（隐式）存在性：在默认情况下，Protocol Buffers 不会跟踪基本类型（如 int32, float, bool 等）的字段是否存在于消息中，
//    只有在字段被设置为非默认值时才会被序列化。这种方式在 Protobuf 3 版本中是默认行为。
//    •	EXPLICIT（显式）存在性：这种设置可以明确表示一个字段是否“存在”或“缺失”，即便它被设置为默认值。这在许多情况下对优化、
//    兼容性和消息表示有帮助，但增加了额外的存储需求。
syntax = "proto3";
//option features.field_presence = IMPLICIT;
option go_package = "middleware/rpc/gorpc/routeguide/protocol";
option java_multiple_files = true;
option java_package = "io.grpc.examples.routeguide";
option java_outer_classname = "RouteGuideProto";

package routeguide;

// Interface exported by the server.
service RouteGuide {
  // A simple RPC.
  //
  // Obtains the feature at a given position.
  //
  // A feature with an empty name is returned if there's no feature at the given
  // position.
  rpc GetFeature(Point) returns (Feature) {}

  // A server-to-client streaming RPC.
  //
  // Obtains the Features available within the given Rectangle.  Results are
  // streamed rather than returned at once (e.g. in a response message with a
  // repeated field), as the rectangle may cover a large area and contain a
  // huge number of features.
  rpc ListFeatures(Rectangle) returns (stream Feature) {}

  // A client-to-server streaming RPC.
  //
  // Accepts a stream of Points on a route being traversed, returning a
  // RouteSummary when traversal is completed.
  rpc RecordRoute(stream Point) returns (RouteSummary) {}

  // A Bidirectional streaming RPC.
  //
  // Accepts a stream of RouteNotes sent while a route is being traversed,
  // while receiving other RouteNotes (e.g. from other users).
  rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}
}

// Points are represented as latitude-longitude pairs in the E7 representation
// (degrees multiplied by 10**7 and rounded to the nearest integer).
// Latitudes should be in the range +/- 90 degrees and longitude should be in
// the range +/- 180 degrees (inclusive).
message Point {
   int32 latitude = 1;
   int32 longitude = 2;
}

// A latitude-longitude rectangle, represented as two diagonally opposite
// points "lo" and "hi".
message Rectangle {
  // One corner of the rectangle.
   Point lo = 1;

  // The other corner of the rectangle.
   Point hi = 2;
}

// A feature names something at a given point.
//
// If a feature could not be named, the name is empty.
message Feature {
  // The name of the feature.
   string name = 1;

  // The point where the feature is detected.
   Point location = 2;
}

// A RouteNote is a message sent while at a given point.
message RouteNote {
  // The location from which the message is sent.
    Point location = 1;

  // The message to be sent.
   string message = 2;
}

// A RouteSummary is received in response to a RecordRoute rpc.
//
// It contains the number of individual points received, the number of
// detected features, and the total distance covered as the cumulative sum of
// the distance between each point.
message RouteSummary {
  // The number of points received.
   int32 point_count = 1;

  // The number of known features passed while traversing the route.
   int32 feature_count = 2;

  // The distance covered in metres.
   int32 distance = 3;

  // The duration of the traversal in seconds.
   int32 elapsed_time = 4;
}
